#pragma enable_d3d11_debug_symbols
#pragma kernel StepSimulation
#pragma kernel ComputeTotalEnergy
#pragma kernel ProcessTexture
#pragma kernel RenderMasses
#pragma kernel ComputePositions
#pragma kernel RenderStars
#pragma kernel ClearTexture

#define threadsX 512 // threads per group
#define G_u 0.0000000000667408 // universal gravitational constant
#define particleRadius 6

struct PointMass
{
	float mass;
	float3 position;
};

struct Motion
{
	float3 velocity;
	float3 acceleration;
};

RWStructuredBuffer<PointMass> masses;// : register(u0);
RWStructuredBuffer<Motion> motions;// : register(u1); 
RWStructuredBuffer<float2> screenPositions;
RWStructuredBuffer<float2> readout;// : register(u2);
RWTexture2D<float4> renderTexture;// :register(u3);

groupshared PointMass threadGroupPointMasses[threadsX]; // thread group shared memory buffer

uint numMasses;
float deltaTime;
float halfDeltaTime;
float3 cameraPosition;
float4x4 worldToScreenMatrix;

inline float3 hueToRGB(float h)
{
	float r = abs(h * 6 - 3) - 1;
	float g = 2 - abs(h * 6 - 2);
	float b = 2 - abs(h * 6 - 4);
	return saturate(float3(r, g, b));
}

[numthreads(threadsX, 1, 1)]
void StepSimulation(uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex)
{
	float3 pos = masses[id.x].position;
	Motion m = motions[id.x];
	float3 vel = m.velocity;
	float3 accel = 0;

	for (uint i = 0; i < numMasses; i += threadsX)
	{
		uint globalIndex = groupIndex + i;
		threadGroupPointMasses[groupIndex] = masses[globalIndex]; // each thread copies global data into thread memory

		GroupMemoryBarrierWithGroupSync(); // ensure that all of thread memory is populated before manipulating

		for (uint i2 = 0; i2 < threadsX; ++i2)
		{
			PointMass p = threadGroupPointMasses[i2]; // faster read from thread memory
			float3 deltaPos = p.position - pos;
			float invDist = rsqrt(dot(deltaPos, deltaPos)); // 1/sqrt(mag^2) = 1/mag
			invDist = isfinite(invDist) ? invDist : 0; // suppress infinity -> 0
			accel += deltaPos * (p.mass * invDist * invDist * invDist);
		}
	}
	
	accel *= G_u;
	pos += vel * deltaTime + m.acceleration * halfDeltaTime * deltaTime;
	vel += (m.acceleration + accel) * halfDeltaTime;

	GroupMemoryBarrierWithGroupSync();
	
	masses[id.x].position = pos;
	m.velocity = vel;
	m.acceleration = accel;
	motions[id.x] = m;
}

float minColorSpeed;
float maxColorSpeed;

[numthreads(256, 1, 1)]
void RenderMasses(uint3 id : SV_DispatchThreadID)
{
	float3 pos = masses[id.x].position;
	float3 vel = motions[id.x].velocity;
	float4 screenPos = mul(worldToScreenMatrix, float4(pos, 1)); // transform world space position to screen space
	float w = screenPos.w;
	screenPos /= w;
	
	float j = (length(vel) - minColorSpeed) / (maxColorSpeed - minColorSpeed);

	//float camDist = min(distance(cameraPosition, pos), 200);
	float3 color = hueToRGB(j); // * (100 / camDist); //float3(0.9, 0.9, 0.55);
	float4 val =  w > 0 && screenPos.x >= 0 && screenPos.y >= 0 ? float4(color, 1.0) : 0;
	renderTexture[(uint2) screenPos] += val;
	GroupMemoryBarrierWithGroupSync();
	renderTexture[(uint2) screenPos + uint2(1, 0)] += val * 0.4;
	GroupMemoryBarrierWithGroupSync();
	renderTexture[(uint2) screenPos + uint2(-1, 0)] += val * 0.4;
	GroupMemoryBarrierWithGroupSync();
	renderTexture[(uint2) screenPos + uint2(0, 1)] += val * 0.4;
	GroupMemoryBarrierWithGroupSync();
	renderTexture[(uint2) screenPos + uint2(0, -1)] += val * 0.4;
	GroupMemoryBarrierWithGroupSync();
}

[numthreads(256, 1, 1)]
void ComputePositions(uint3 id: SV_DispatchThreadID)
{
	float3 pos = masses[id.x].position;
	float4 screenPos = mul(worldToScreenMatrix, float4(pos, 1)); // transform world space position to screen space
	float w = screenPos.w;
	screenPositions[id.x] = screenPos / w / step(0, w); // divide by 0 if w is negative, results in infinity
}

[numthreads(32, 32, 1)]
void RenderStars(uint3 id: SV_DispatchThreadID)
{
	float sum = 0;
	const float2 pos = id.xy;
	for (uint i = 0; i < numMasses; i++)
	{
		float2 diff = screenPositions[i] - pos;
		sum += 1.0f / dot(diff, diff);
	}
	renderTexture[id.xy] += 1000.0f * sum / numMasses;
}

[numthreads(256, 1, 1)]
void ComputeTotalEnergy(uint3 id : SV_DispatchThreadID)
{
	PointMass p = masses[id.x];
	float Gm = G_u * p.mass;
	float vel = motions[id.x].velocity;
	float Ekinetic = 0.5f * vel * vel * p.mass;
	float Epotential = 0;

	for (uint i = 0; i < numMasses; ++i)
	{
		PointMass po = masses[i];
		float dist = length(p.position - po.position);
		if (i != id.x)
		{
			Epotential -= po.mass / dist;
		}
	}
	
	Epotential *= Gm * 0.5; // correct duplicate pairwise interaction counts

	readout[id.x] = float2(Ekinetic, Epotential);
}

// Fade kernel, subtracts color from all pixels
[numthreads(32, 8, 1)]
void ProcessTexture(uint3 id : SV_DispatchThreadID)
{
	float4 originalValue = renderTexture[id.xy];
	float4 fadedValue = max(0, originalValue - 0.05);
	renderTexture[id.xy] = fadedValue;
}

// Clear texture kernel
[numthreads(32, 8, 1)]
void ClearTexture(uint3 id : SV_DispatchThreadID)
{
	renderTexture[id.xy] = 0;
}