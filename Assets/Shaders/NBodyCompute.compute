#pragma kernel StepSimulation
#pragma kernel ComputeTotalEnergy
#pragma kernel ProcessTexture

#define G_u 0.0000000000667408
#define a_b 0.06637 // acceleration due to a 10^30 kg mass at 1 exameter away (10^15 m)

struct PointMass
{
	float mass; // planned [in 10^30 kilograms]
	float3 position; // planned [in petameters (10^15 meters)]
};

struct Motion
{
	float3 velocity;
	float3 acceleration;
};

RWTexture2D<float4> renderTexture;

RWStructuredBuffer<PointMass> masses : register(u0);
RWStructuredBuffer<Motion> motions : register(u1); 
RWStructuredBuffer<float> readout : register(u2);

float numMasses;
float deltaTime;
float halfDeltaTime;

float4x4 worldToScreenMatrix;

inline float3 hueToRGB(float H)
{
	float R = abs(H * 6 - 3) - 1;
	float G = 2 - abs(H * 6 - 2);
	float B = 2 - abs(H * 6 - 4);
	return saturate(float3(R, G, B));
}

[numthreads(256, 1, 1)]
void StepSimulation(uint3 id : SV_DispatchThreadID)
{
	float3 pos = masses[id.x].position;
	Motion m = motions[id.x];
	float3 vel = m.velocity;
	float3 accel = 0;

	//PointMass p = masses[0]; // initialize struct

	for (int i = 0; i < numMasses; ++i) // calculate net acceleration
	{
		PointMass p = masses[i];
		float mass = p.mass;
		float3 deltaPos = p.position - pos;
		float3 invDist = rsqrt(dot(deltaPos, deltaPos) + 0.0001f);
		float3 cbInvDist = invDist * invDist * invDist;

		accel += deltaPos * (G_u * mass * cbInvDist);
	}

	GroupMemoryBarrierWithGroupSync(); // sync threads before translating masses

	// vel += m.acceleration * halfDeltaTime; // kick-drift-kick integration
	// pos += vel * deltaTime;
	// vel += accel * halfDeltaTime;

	pos += vel * deltaTime + m.acceleration * halfDeltaTime * deltaTime; // velocity Verlet integration
	vel += (m.acceleration + accel) * halfDeltaTime;

	masses[id.x].position = pos; // save state
	m.velocity = vel;
	m.acceleration = accel;
	motions[id.x] = m;

	// Rendering
	float4 v = mul(worldToScreenMatrix, float4(pos, 1)); // transform world space position to screen space
	float w = v.w;
	v /= w;
	
	float j = length(vel) * 0.0025;
	
	if (v.x >= 0 && v.y >= 0)
	{
		renderTexture[(float2) v] = w > 0 ? float4(hueToRGB(j), 1.0) : 0;
	}
}

[numthreads(128, 1, 1)]
void ComputeTotalEnergy(uint3 id : SV_DispatchThreadID)
{
	if (id.x == 0)
	{
		readout[0] = 0;
		readout[1] = 0;
	}

	PointMass p = masses[id.x];
	float Gm = G_u * p.mass;
	float vel = motions[id.x].velocity;
	vel *= vel;

	for (int i = 0; i < numMasses; ++i)
	{
		PointMass po = masses[i];
		float dist = distance(p.position, po.position);
		if (i == id.x)
		{
			readout[0] += 0.5 * p.mass * vel;
		} else
		{
			readout[1] -= Gm * po.mass / dist;
		}
	}
}


// Fade kernel, subtracts color from all pixels
[numthreads(32, 8, 1)]
void ProcessTexture(uint3 id : SV_DispatchThreadID)
{
	float4 originalValue = renderTexture[id.xy];
	float4 fadedValue = max(0, originalValue - 0.1 * deltaTime);
	renderTexture[id.xy] = fadedValue;
}