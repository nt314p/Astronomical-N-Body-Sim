#pragma enable_d3d11_debug_symbols
#pragma kernel StepSimulation
#pragma kernel ComputeTotalEnergy
#pragma kernel FadeTexture
#pragma kernel RenderMasses
#pragma kernel ClearTexture
#pragma kernel Upsample
#pragma kernel Downsample
#pragma kernel PostProcessTexture

#define threadsX 512 // threads per group
#define renderThreadLength 32
#define renderThreads renderThreadLength * renderThreadLength
#define G_u 0.000667408 // universal gravitational constant (not accurate)

struct PointMass
{
    float mass;
    float3 position;
};

struct Motion
{
    float3 velocity;
    float3 acceleration;
};

RWStructuredBuffer<PointMass> masses; // : register(u0);
RWStructuredBuffer<Motion> motions; // : register(u1); 
RWStructuredBuffer<float2> readout; // : register(u2);
RWTexture2D<float4> renderTexture; // :register(u3);

Texture2D srcTexture;
RWTexture2D<float4> destTexture;
float4 textureDimensions;

groupshared PointMass threadGroupPointMasses[threadsX]; // thread group shared memory buffer
groupshared float2 threadGroupScreenPositions[renderThreads];

uint numMasses;
float deltaTime;
float halfDeltaTime;
float4x4 worldToScreenMatrix;

inline float3 HueToRGB(float h)
{
    float r = abs(h * 6 - 3) - 1;
    float g = 2 - abs(h * 6 - 2);
    float b = 2 - abs(h * 6 - 4);
    return saturate(float3(r, g, b));
}

[numthreads(threadsX, 1, 1)]
void StepSimulation(uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex)
{
    float3 pos = masses[id.x].position;
    Motion m = motions[id.x];
    float3 vel = m.velocity;
    float3 accel = 0;

    for (uint i = 0; i < numMasses; i += threadsX)
    {
        const uint globalIndex = groupIndex + i;
        threadGroupPointMasses[groupIndex] = masses[globalIndex]; // each thread copies global data into thread memory

        GroupMemoryBarrierWithGroupSync(); // ensure that all of thread memory is populated before manipulating

        for (uint i2 = 0; i2 < threadsX; ++i2)
        {
            const PointMass p = threadGroupPointMasses[i2]; // faster read from thread memory
            const float3 deltaPos = p.position - pos;
            float invDist = rsqrt(dot(deltaPos, deltaPos)); // 1/sqrt(mag^2) = 1/mag
            invDist = isfinite(invDist) ? invDist : 0; // suppress infinity -> 0
            accel += deltaPos * (p.mass * invDist * invDist * invDist);
        }

        GroupMemoryBarrierWithGroupSync();
    }

    accel *= G_u;
    pos += vel * deltaTime + m.acceleration * halfDeltaTime * deltaTime;
    vel += (m.acceleration + accel) * halfDeltaTime;

    GroupMemoryBarrierWithGroupSync();

    masses[id.x].position = pos;
    m.velocity = vel;
    m.acceleration = accel;
    motions[id.x] = m;
}

float minColorSpeed;
float maxColorSpeed;

[numthreads(256, 1, 1)]
void RenderMasses(uint3 id : SV_DispatchThreadID)
{
    float3 pos = masses[id.x].position;
    float3 vel = motions[id.x].velocity;
    float4 screenPos = mul(worldToScreenMatrix, float4(pos, 1)); // transform world space position to screen space
    float w = screenPos.w;
    screenPos /= w;

    //float j = (length(vel) - minColorSpeed) / (maxColorSpeed - minColorSpeed);

    float hue = frac((id.x * 73856093 ^ 19349663 + 83492791) / 4294967295.0);

    float3 color = clamp(HueToRGB(hue) * float3(0.4, 0.3, 0.6) + float3(0.4, 0.3, 0.4), 0, 1);
    float4 val = screenPos.x >= 0 && screenPos.y >= 0 && w > 0 ? float4(color, 1.0) : 0;
    renderTexture[screenPos.xy] += val;
}

[numthreads(256, 1, 1)]
void ComputeTotalEnergy(uint3 id : SV_DispatchThreadID)
{
    PointMass p = masses[id.x];
    float Gm = G_u * p.mass;
    float vel = motions[id.x].velocity;
    float Ekinetic = 0.5f * vel * vel * p.mass;
    float Epotential = 0;

    for (uint i = 0; i < numMasses; ++i)
    {
        PointMass po = masses[i];
        float dist = length(p.position - po.position);
        if (i != id.x)
        {
            Epotential -= po.mass / dist;
        }
    }

    Epotential *= Gm * 0.5; // correct duplicate pairwise interaction counts

    readout[id.x] = float2(Ekinetic, Epotential);
}

inline float4 BilinearSample(Texture2D srcTexture, const uint3 c)
{
    float4 sample = 0;
    sample += srcTexture.Load(c + int3(0, 0, 0));
    sample += srcTexture.Load(c + int3(0, 1, 0));
    sample += srcTexture.Load(c + int3(1, 0, 0));
    sample += srcTexture.Load(c + int3(1, 1, 0));
    return sample * 0.25;
}

// Downsample (iterate over smaller texture)
[numthreads(32, 8, 1)]
void Downsample(uint3 id : SV_DispatchThreadID) // TODO: https://youtu.be/ml-5OGZC7vE?t=517 Karis average?
{
    float4 sample = 0;
    const int3 srcTexCoord = 2 * id.xyz;

    // weight 4
    sample += BilinearSample(srcTexture, srcTexCoord + int3(0, 0, 0));
    sample += BilinearSample(srcTexture, srcTexCoord + int3(-1, -1, 0));
    sample += BilinearSample(srcTexture, srcTexCoord + int3(-1, 1, 0));
    sample += BilinearSample(srcTexture, srcTexCoord + int3(1, 1, 0));
    sample += BilinearSample(srcTexture, srcTexCoord + int3(1, -1, 0));
    sample *= 2;

    // weight 2
    sample += BilinearSample(srcTexture, srcTexCoord + int3(-2, 0, 0));
    sample += BilinearSample(srcTexture, srcTexCoord + int3(0, -2, 0));
    sample += BilinearSample(srcTexture, srcTexCoord + int3(0, 2, 0));
    sample += BilinearSample(srcTexture, srcTexCoord + int3(2, 0, 0));
    sample *= 2;

    // weight 1
    sample += BilinearSample(srcTexture, srcTexCoord + int3(-2, -2, 0));
    sample += BilinearSample(srcTexture, srcTexCoord + int3(-2, 2, 0));
    sample += BilinearSample(srcTexture, srcTexCoord + int3(2, -2, 0));
    sample += BilinearSample(srcTexture, srcTexCoord + int3(2, 2, 0));

    destTexture[id.xy] = sample * 0.03125;
}


// Upsample (iterate over larger texture)
[numthreads(32, 8, 1)]
void Upsample(uint3 id: SV_DispatchThreadID)
{
    float4 sample = 0;
    // if id.xy is even, the weighting is 0.375

    const int3 coord = id / 2;
    float2 highFactor = (id.xy & 1) / 4.0 + 0.875; // weighting for pixels to the top and right
    float2 lowFactor = 2 - highFactor; // weighting for pixels to the bottom and left

    //highFactor = float2(1.0, 1.0);
    //lowFactor = float2(1.0, 1.0);
    
    sample += srcTexture.Load(coord + int3(-1, -1, 0)) * lowFactor.x * lowFactor.x;
    sample += srcTexture.Load(coord + int3(0, -1, 0)) * 2 * lowFactor.y;
    sample += srcTexture.Load(coord + int3(1, -1, 0)) * highFactor.x * lowFactor.y;
    sample += srcTexture.Load(coord + int3(-1, 0, 0)) * 2 * lowFactor.x;
    sample += srcTexture.Load(coord + int3(0, 0, 0)) * 4;
    sample += srcTexture.Load(coord + int3(1, 0, 0)) * 2 * highFactor.x;
    sample += srcTexture.Load(coord + int3(-1, 1, 0)) * lowFactor.x * highFactor.y;
    sample += srcTexture.Load(coord + int3(0, 1, 0)) * 2 * highFactor.y;
    sample += srcTexture.Load(coord + int3(1, 1, 0)) * highFactor.x * highFactor.y;

    float4 tex = destTexture[id.xy];
    tex += sample * 0.0625 * 1.2;    
    destTexture[id.xy] = tex;
}

// Fade kernel, subtracts color from all pixels
[numthreads(32, 8, 1)]
void FadeTexture(uint3 id : SV_DispatchThreadID)
{
    renderTexture[id.xy] = max(0, renderTexture[id.xy] - 0.05);
}

// SamplerState ssampler
// {
//     Filter = MIN_MAG_MIP_POINT;
//     AddressU = Wrap;
//     AddressV = Wrap;
// };

inline float luminance(float3 color) {
    return dot(color, float3(0.299f, 0.587f, 0.114f));
}

inline float3 TumblinRushmeier(float3 col, float Lavg)
{
    const float Ldmax = 100;
    float Lin = luminance(col);

    //float Lavg = tex2Dlod(_LuminanceTex, float4(i.uv.x, i.uv.y, 0, 10.0f)).r;
    float Cmax = 1;

    float logLrw = log10(Lavg) + 0.84;
    float alphaRw = 0.4 * logLrw + 2.92;
    float betaRw = -0.4 * logLrw * logLrw - 2.584 * logLrw + 2.0208;
    float Lwd = Ldmax / sqrt(Cmax);
    float logLd = log10(Lwd) + 0.84;
    float alphaD = 0.4 * logLd + 2.92;
    float betaD = -0.4 * logLd * logLd - 2.584 * logLd + 2.0208;
    float Lout = pow(Lin, alphaRw / alphaD) / Ldmax * pow(10.0, (betaRw - betaD) / alphaD) - (1.0 / Cmax);

    float3 Cout = col / Lin * Lout;

    return saturate(Cout);
}

// PostProcessTexture
[numthreads(32, 8, 1)]
void PostProcessTexture(uint3 id : SV_DispatchThreadID)
{
    float3 val = renderTexture.Load(id.xy);
    //float3 Lavg = luminance(renderTexture.);
    //val = TumblinRushmeier(val, Lavg);
    renderTexture[id.xy] = float4(pow(val, 0.7), 1);

    //if (dot(val, val) > 1) renderTexture[id.xy] = float4(1, 0, 1, 1);
}

// Clear texture kernel
[numthreads(32, 8, 1)]
void ClearTexture(uint3 id : SV_DispatchThreadID)
{
    renderTexture[id.xy] = 0;
}
