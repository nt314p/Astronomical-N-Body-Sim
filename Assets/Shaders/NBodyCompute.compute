#pragma kernel StepSimulation
#pragma kernel ProcessTexture

#define G_u 0.0000000000667408
#define a_b 0.06637 // acceleration due to a 10^30 kg mass at 1 exameter away (10^15 m)

struct PointMass
{
	float mass; // planned [in 10^30 kilograms]
	float3 velocity;
};

RWTexture2D<float4> renderTexture;

RWStructuredBuffer<float3> positions : register(u0); // planned [in petameters (10^15 meters)]
RWStructuredBuffer<PointMass> masses : register(u1);

float numMasses;
float deltaTime;

float4x4 m;

inline float3 hueToRGB(float H)
{
	float R = abs(H * 6 - 3) - 1;
	float G = 2 - abs(H * 6 - 2);
	float B = 2 - abs(H * 6 - 4);
	return saturate(float3(R, G, B));
}

[numthreads(128, 1, 1)]
void StepSimulation(uint3 id : SV_DispatchThreadID)
{
	float3 pos = positions[id.x];
	float3 vel = masses[id.x].velocity;
	float3 accel = 0;

	for (int i = 0; i < numMasses; ++i) // calculate net acceleration
	{
		float mass = masses[i].mass;
		float3 deltaPos = positions[i] - pos;
		float3 invDist = rsqrt(dot(deltaPos, deltaPos) + 0.000001f);
		float3 cbInvDist = invDist * invDist * invDist;

		accel += deltaPos * (G_u * mass * cbInvDist);
	}

	GroupMemoryBarrierWithGroupSync(); // sync threads before translating masses

	pos += (vel + accel * 0.5f) * deltaTime; // leapfrog integration
	vel += accel * deltaTime;

	masses[id.x].velocity = vel;
	positions[id.x] = pos;

	float4 v = mul(m, float4(pos, 1)); // transform world space position to screen space
	float w = v.w;
	v /= w;

	float j = length(vel) * 0.0025;

	if (v.x >= 0 && v.y >= 0) 
	{
		renderTexture[(float2) v] += w > 0 ? float4(hueToRGB(j), 1.0) : 0;
	}
}


// Fade kernel, subtracts color from all pixels
[numthreads(32, 8, 1)]
void ProcessTexture(uint3 id : SV_DispatchThreadID) {
	float4 originalValue = renderTexture[id.xy];
	float4 fadedValue = max(0, originalValue - 0.1 * deltaTime);
	renderTexture[id.xy] = fadedValue;
}